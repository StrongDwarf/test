stages:
  - 评审
  - 构建
  - 测试
  - 发布
  - 部署

.node: &node
  cache: &node_cache
    key: $CI_COMMIT_REF_SLUG
    paths:
      - node_modules/
  image: node:alpine
  retry:
    max: 2
    when:
      - stuck_or_timeout_failure

.docker: &docker
  image: docker
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_HOST: "tcp://localhost:2375"
  retry:
    max: 2
    when:
      - stuck_or_timeout_failure
  before_script:
    - echo $CI_JOB_TOKEN | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY

.alpine: &alpine
  dependencies: []
  image: alpine
  variables:
    GIT_STRATEGY: none
  retry:
    max: 2
    when:
      - stuck_or_timeout_failure

编码质量评审:
  <<: *node
  stage: 评审
  except:
    - master
  allow_failure: true
  script:
    - npm install
    - npm run lint

构建:
  <<: *node
  stage: 构建
  artifacts:
    name: $CI_COMMIT_SHA
    paths:
      - dist/
  script:
    - "[ -d \"node_modules\" ] || npm install"
    - npm run build

发布docker镜像:
  <<: *docker
  stage: 发布
  only:
    - master
  dependencies:
    - 构建
  script:
    - docker build -t $CI_REGISTRY_IMAGE:stable .
    - docker push $CI_REGISTRY_IMAGE:stable
    - "[ -n \"$CI_COMMIT_TAG\" ] && docker tag $CI_REGISTRY_IMAGE:stable $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG && docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG || true"

发布临时docker镜像:
  <<: *docker
  stage: 发布
  except:
    - master
  dependencies:
    - 构建
  script:
    - docker build -t $CI_REGISTRY_IMAGE:latest .
    - docker push $CI_REGISTRY_IMAGE:latest

部署测试环境:
  <<: *alpine
  stage: 部署
  except:
    - master
  script:
    - echo "Comming..."
